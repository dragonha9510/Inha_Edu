#pragma once

// Q1.	 다음의 내용을 포함하는 StopWatch 클래스
//			- get함수로 startTime, endTime;
//			- StartTime을 현재 시간으로 초기화하는 인수 없는 생성자
//			- StartTime을 현재 시간으로 재설정하는 start함수
//			- endTime을 현재 시간으로 설정하는 stop 함수
//			- 경과 시간을 반환하는 getElapsedTime() 함수
//			- 클래스 UML다이어그램, 클래스를 구현하라.
int TimeTest();

//Q2. N명의 이용자를 가진 소셜 네트워크 서비스가 있다.
//   각각의 이용자는 1번 부터 N번까지 번호가 붙어 있다.
//   이 SNS에서 각 이용자의 친구 수를 분석하려고 한다.
//   이용자 A가 B의 친구라면 B도 A의 친구이다. (상호관계 <-> )
//   이때, 친구의 친구도 친구이다. 따라서 A와 B가 친구 관계이고, B와 C가 친구 관계이면 A와 C도 친구 관계이다.
//
//   SNS의 전체 이용자수 N, 각 이용자의 친구 관계를 담고 있는 배열 relation이 매개변수로 주어질 때, 각 이용자의 친구 수를
//   1번 이용자부터 순서대로 담은 배열을 return 하도록 solution 함수를 완성하라.
//
//   제한 사항
//      - N은 2 이상 100 이하의 자연수
//      - relation의 각 원소는 친구 관계를 나타내며, relation의 길이는 1 이상 N(N-1)/2 이하
//      - 각 친구 관계는 길이가 2인 배열이며, 순서대로 (a,b)로 나타낸다.
//         a,b (1<=a, b<=n, a!=b)는 친구 관계인 두 이용자의 번호.
//         a와 b가 같은 경우는 없으며, 친구 관계는 한 번씩만 주어진다.
//
//   제한 시간
//      - 10,000ms (=> 10초)
int* SocialFriend(int N, int relation[][2], int size);

//Q3.	 8 X 8 체스판
//		퀸은 상,하,좌,우,대각 총 8방향으로 기물이 없는 칸에 한해 제한 없이 이동 가능하다.
//		8퀸이 서로 충돌하지 않고 위치할 수 있는 경우의 수를 출력하고,
//		해당 조합을 □ ■ 를 통해 각 퀸의 배치를 출력
//
int ChessQueen();

// Class 1
int Class0614_1();